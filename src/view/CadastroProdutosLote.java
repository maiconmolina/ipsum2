/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ProdutoDoLoteJpaController;
import controller.ProdutoJpaController;
import controller.exceptions.NonexistentEntityException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Lote;
import model.Produto;
import model.ProdutoDoLote;
import Util.DecimalFormattedField;

/**
 *
 * @author Maicon
 */
public class CadastroProdutosLote extends javax.swing.JInternalFrame {

    /**
     * Creates new form CadastroProdutosLote
     */
    private Lote lote;
    private ProdutoJpaController jpaprod;
    private ProdutoDoLoteJpaController jpaplote;
    
    public CadastroProdutosLote(Lote plote) {
        if (plote == null) return;
        this.lote = plote;
        initComponents();
        loadLote();
        loadProdutos();
        atualizaValor();
    }
    
    private void loadLote(){
        numlote.setText(lote.getCodlote().toString());
    }
    
    private void loadProdutos(){
        jpaplote = new ProdutoDoLoteJpaController(ipsum2.Ipsum2.getFactory());
        jpaprod = new ProdutoJpaController(ipsum2.Ipsum2.getFactory());
        Boolean zerado = false;
        List<Produto> plist = jpaprod.getEntityManager().createNamedQuery("Produto.findByAtivo").setParameter("ativo", 1).getResultList();
        List<ProdutoDoLote> pdlote = lote.getProdutoDoLoteList();
        List<Object> dados = new ArrayList<>();
        DefaultTableModel tmodel = (DefaultTableModel)produtos.getModel();
        
        for (Produto p : plist){
            dados.add(p.getCodprod());
            dados.add(p.getDescricao());
            dados.add(p.getPreco()); 
            
            for (ProdutoDoLote pdl : pdlote){
                if (p.equals(pdl.getProduto())){
                    dados.add((pdl.getQtde()==null)?0:pdl.getQtde());
                    dados.add(true);
                }
                else zerado = true;
            }
            if (zerado){
                dados.add(0);
                dados.add(false);
                zerado = false;
            }
            
            tmodel.addRow(dados.toArray());
            dados.clear();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        produtos = new javax.swing.JTable();
        numlote = new javax.swing.JLabel();
        bsalvar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        valor = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Produtos do Lote");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Lote:");

        produtos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Produto", "Preço", "Quantidade", "No Lote"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        produtos.setColumnSelectionAllowed(true);
        produtos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                produtosMouseClicked(evt);
            }
        });
        produtos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                produtosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(produtos);
        produtos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (produtos.getColumnModel().getColumnCount() > 0) {
            produtos.getColumnModel().getColumn(0).setMinWidth(80);
            produtos.getColumnModel().getColumn(0).setPreferredWidth(80);
            produtos.getColumnModel().getColumn(0).setMaxWidth(80);
            produtos.getColumnModel().getColumn(2).setMinWidth(80);
            produtos.getColumnModel().getColumn(2).setPreferredWidth(80);
            produtos.getColumnModel().getColumn(2).setMaxWidth(80);
            produtos.getColumnModel().getColumn(3).setMinWidth(80);
            produtos.getColumnModel().getColumn(3).setPreferredWidth(80);
            produtos.getColumnModel().getColumn(3).setMaxWidth(80);
            produtos.getColumnModel().getColumn(4).setMinWidth(80);
            produtos.getColumnModel().getColumn(4).setPreferredWidth(80);
            produtos.getColumnModel().getColumn(4).setMaxWidth(80);
        }

        bsalvar.setText("Salvar");
        bsalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsalvarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Valor:");

        valor.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numlote, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valor, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bsalvar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(numlote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bsalvar)
                    .addComponent(jLabel2)
                    .addComponent(valor))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bsalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsalvarActionPerformed
        DefaultTableModel model = (DefaultTableModel) produtos.getModel();
        
        
        Produto p;
        ProdutoDoLote pdl = new ProdutoDoLote();
        
        List<ProdutoDoLote> listToDestroy = lote.getProdutoDoLoteList();
        
        for (ProdutoDoLote x : listToDestroy){
            try {
                jpaplote.destroy(x.getProdutoDoLotePK());
            } catch (NonexistentEntityException ex) {
                Logger.getLogger(CadastroProdutosLote.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        int i;
        Boolean b = false;
        for(i = 0; i < model.getRowCount(); i++){
            b = (Boolean)model.getValueAt(i, 4);
            if (b == null) b = false;
            if (b){
                Integer pd = (Integer)model.getValueAt(i, 0);
                p = jpaprod.findProduto(pd);
                pdl = new ProdutoDoLote();
                pdl.setProduto(p);
                pdl.setLote(lote);
                pdl.setQtde((Integer)model.getValueAt(i, 3));
                try {
                    jpaplote.create(pdl);
                } catch (Exception ex) {
                    Logger.getLogger(CadastroProdutosLote.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        ListaLote ll = new ListaLote();
        Start.addFrame(ll);
        ll.setLocation(10, 10);
        ll.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bsalvarActionPerformed

    private void produtosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_produtosMouseClicked
        atualizaValor();
    }//GEN-LAST:event_produtosMouseClicked

    private void produtosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_produtosKeyReleased
       atualizaValor();
    }//GEN-LAST:event_produtosKeyReleased
    
    private void atualizaValor(){
        DefaultTableModel model = (DefaultTableModel) produtos.getModel();
        int i;
        Double v = (double) 0;
        Boolean b;
        Double qtde, preco;
        
        for(i = 0; i < model.getRowCount(); i++){
            if (model.getValueAt(i, 4) == null) b = false;
            else {
                b = (Boolean)model.getValueAt(i, 4);
            }
            if (b){
                if (model.getValueAt(i, 3) == null)  qtde = (double) 0;
                else qtde = Double.parseDouble(model.getValueAt(i, 3).toString());
                
                if (model.getValueAt(i, 2) == null) preco = (double) 0;
                else preco = Double.parseDouble(model.getValueAt(i, 2).toString());
                
                v = v + qtde * preco;
            }
        }
        
        valor.setText("R$ " + v.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bsalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel numlote;
    private javax.swing.JTable produtos;
    private javax.swing.JLabel valor;
    // End of variables declaration//GEN-END:variables
}
